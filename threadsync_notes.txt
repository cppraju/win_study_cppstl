#include <iostream>
#include <thread>
#include <queue>
#include <condition_variable>

std::queue<int> produced_nums;
std::mutex m;
std::condition_variable cond_var;
const int MAX_QUEUE_SIZE = 5; // Maximum size of the queue

void producer() {
    for (int i = 0; ; i++) {
        std::this_thread::sleep_for(std::chrono::milliseconds(900)); // simulate work
        std::unique_lock<std::mutex> lock(m, std::defer_lock);
        lock.lock();
        cond_var.wait(lock, []{ return produced_nums.size() < MAX_QUEUE_SIZE; }); // Wait if the queue is full
        produced_nums.push(i);
        std::cout << "produced " << i << '\n';
        lock.unlock();
        cond_var.notify_all(); // Notify after unlocking
    }
}

void consumer() {
    while (true) {
        std::unique_lock<std::mutex> lock(m, std::defer_lock);
        lock.lock();
        cond_var.wait(lock, []{ return !produced_nums.empty(); }); // Wait if the queue is empty
        std::cout << "consuming " << produced_nums.front() << '\n';
        produced_nums.pop();
        lock.unlock();
        cond_var.notify_all(); // Notify after unlocking
    }
}

int main() {
    std::thread prod1(producer);
    std::thread cons1(consumer);
    prod1.join();
    cons1.join();
    return 0;
}

